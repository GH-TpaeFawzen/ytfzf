#!/bin/sh

# https://github.com/pystardust/ytfzf

# DEFAULTS
: \
  ${YTFZF_HIST:=1} \
  ${YTFZF_LOOP:=0} \
  ${YTFZF_CUR:=1} \
  ${YTFZF_CACHE:="$HOME/.cache/ytfzf"} \
  ${YTFZF_PREF:=""} \
  ${YTFZF_EXTMENU:='dmenu -i -l 30 -p Search:'} \
  ${YTFZF_EXTMENU_LEN:=190}

## directories
history_file="$YTFZF_CACHE"/ytfzf_hst
current_file="$YTFZF_CACHE"/ytfzf_cur
[ -d $YTFZF_CACHE ] || mkdir -p $YTFZF_CACHE

## player settings
show_format="0"
player="mpv"
player_format="mpv --ytdl-format="

## misc
FZF_DEFAULT_OPTS=""

# DYNAMIC SIZE
## min length
format_fzf () {
	dur_len=7
	view_len=10
	date_len=14
	url_len=12

	t_size="$(stty size | cut -f2 -d' ')"
        case "$((t_size<75))" in 1)
		# title channel
		frac=$(((t_size - 1)/4))
		title_len=$((frac * 3))
		channel_len=$((frac * 1 + 7))
	;;*) case "$((t_size<95))" in 1)
		# title channel time
		frac=$(((t_size - 4)/8))
		title_len=$((frac * 5 - 1))
		channel_len=$((frac * 2 - 1))
		dur_len=$((frac * 1 + 10))
	;;*) case "$((t_size<110))" in 1)
		# title channel time views
		frac=$(((t_size - 1)/9))
		title_len=$((frac * 5 ))
		channel_len=$((frac * 2 ))
		dur_len=$((frac * 1))
		view_len=$((frac * 1 + 7))
	;;*) case "$((t_size<130))" in 1)
		# title channel time views date
		frac=$(((t_size - 5)/11))
		title_len=$((frac * 5 - 1))
		channel_len=$((frac * 2))
		dur_len=$((frac * 1))
		view_len=$((frac * 1))
		date_len=$((frac * 2 + 20))
	;;*)    # all
		frac=$(((t_size - 5 - 12)/11))
		title_len=$((frac * 6 - 1))
		channel_len=$((frac * 3/2))
		dur_len=$((frac * 1))
		view_len=$((frac * 1))
		date_len=$((frac * 3/2 ))
	;;esac ;;esac ;;esac ;;esac
}
format_ext_menu () {
	frac=$(((YTFZF_EXTMENU_LEN - 5 - 12)/11))
	title_len=$((frac * 6 - 1))
	channel_len=$((frac * 3/2))
	dur_len=$((frac * 1))
	view_len=$((frac * 1))
	date_len=$((frac * 3/2 ))
	url_len=12
}

# HELPER TEXT
errinfo () {
echo   "Check for new versions and report at: https://github.com/pystardust/ytfzf"
}
helpinfo () {
printf "Usage: %bytfzf %b<search query>%b\n" "\033[1;32m" "\033[1;33m" "\033[0m";
printf "     -h                    Show this help text\n";
printf "     -D                    Use external menu(default dmenu) instad of fzf \n";
printf "     -H                    Choose from history \n";
printf "     -x                    Delete history\n";
printf "     -m  <search query>    Audio only (for music)\n";
printf "     -d  <search query>    Download to current directory\n";
printf "     -f  <search query>    Show available formats before proceeding\n";
printf "     -a  <search query>    Auto play the first result, no selector\n";
printf "     -l  <search query>    Loop: prompt selector again after video ends\n";
printf "\n"
printf "  Option can be combines. Like\n"
printf "     ytfzf -fDH            to show history using external \n"
printf "                           menu and show formats\n"
printf "\n"
printf "  Defaults can be modified through ENV variables\n";
printf "  Defaults:\n";
printf "     YTFZF_HIST=1                          0 : off history\n";
printf "     YTFZF_CACHE=~/.cache/ytfzf\n";
printf "     YTFZF_LOOP=0                          1 : loop the selection prompt\n";
printf "     YTFZF_PREF=''                         22: 720p,  18: 360p\n";
printf "     YTFZF_CUR=1                           For status bar bodules\n";
printf "     YTFZF_EXTMENU=' dmenu -i -l 30'\n";
printf "  To use rofi\n";
printf "     YTFZF_EXTMENU=' rofi -dmenu -fuzzy -width 1500'\n";
printf "\n";
printf "  For more details refer https://github.com/pystardust/ytfzf\n";
}
usageinfo () {
printf "Usage: %bytfzf %b<search query>%b\n" "\033[1;32m" "\033[1;33m" "\033[0m";
printf "     'ytfzf -h' for more information\n";
}
format_awk () {
	awk -F'\t' \
	-v A=$title_len -v B=$channel_len -v C=$dur_len -v D=$view_len -v E=$date_len -v F=$url_len \
	'{ printf "%-"A"."A"s\t%-"B"."B"s\t%-"C"."C"s\t%-"D"."D"s\t%-"E"."E"s\t%-"F"."F"s\n",$1,$2,$4,$3,$5,$6}'
}
video_menu () {
	format_awk | eval "$prompt_menu"
}
save_before_exit () {
	case $YTFZF_HIST in 1) printf "%s\n" "$selected_data" >> "$history_file" ;;esac
	case $YTFZF_CUR in 1) printf "" > "$current_file" ;;esac
}

# Opt variables
main=0
auto_select=0
is_ext_menu="0"
# DEP CHECK
dep_ck () {
	command -v "$1" 1>/dev/null || { printf "$1 not found. Please install it.\n" ; exit 2; }
}
dep_ck "jq"; dep_ck "youtube-dl"; dep_ck "mpv";

# OPT
while getopts "hDmdfxHal" opt; do
	case ${opt} in
		h) 	helpinfo
			exit;
			;;
		D) 	is_ext_menu="1"
			;;
		m) 	YTFZF_PREF="bestaudio"
			;;
		d) 	player="youtube-dl"
		   	player_format="youtube-dl -f "
			;;
		f) 	show_format="1"
			;;
		H)
			case $YTFZF_HIST in 1)
				[ -e "$history_file" ] || touch "$history_file"
				hist_data="$(tac "$history_file")"
				case "$hist_data" in '') echo "History is empty!"; exit ;;esac
				videos_data="$(echo "$hist_data" | uniq )"
				main=1
                                continue
			;;esac
			echo "History is not enabled. Please enable it to use this option -H.";
			exit;
			;;
		x)
			[ -e "$history_file" ] && rm "$history_file" && touch "$history_file" && printf "History has been cleared\n"
			exit;
			;;
		a) 	auto_select=1
			;;
		l) 	YTFZF_LOOP=1
			;;
		*)
			printf "Option not found!\n"
			usageinfo
			exit 2;
			;;
	esac
done
shift $((OPTIND-1))

if [ $is_ext_menu -eq 0 ]; then
	dep_ck "fzf"
	search_query="$*"
	prompt_menu='fzf --tabstop=1 --delimiter="$(printf "\t")" --nth=1,2'
	format_fzf
else
	# dmenu doesnt render tabs so removing it
	prompt_menu='tr -d "$(printf "\t")" | '"$YTFZF_EXTMENU"
	format_ext_menu
fi

# MAIN
[ $main -eq 0 ] && {
	[ $is_ext_menu -eq 1 ] && search_query="$(printf "" | $YTFZF_EXTMENU)"
	[ -z "$search_query" ] && { usageinfo ; exit 0; }

	## GETTING DATA
	yt_html="$(
	useragent='user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Safari/537.36'

	curl 'https://www.youtube.com/results' -s \
	  -G --data-urlencode "search_query=$search_query" \
	  -H 'authority: www.youtube.com' \
	  -H "$useragent" \
	  -H 'accept-language: en-US,en;q=0.9' \
	  --compressed
	)"
	[ -z "$yt_html" ] &&  {
		printf "ERROR[#01]: Couldn't curl website. Please check your network and try again.\n";
		errinfo; exit 2; }

	yt_json="$(printf "%s" "$yt_html" |sed -n '/var *ytInitialData/,$p' | tr -d '\n' |\
		sed -E ':a s_^.*var ytInitialData ?=__ ; s_;</script>.*__ ;'
	 )"
	[ -z "$yt_json" ] &&  {
		printf "ERROR[#02]: Couldn't find data on site.\n";
		errinfo ; exit 2; }

	videos_data="$(printf "%s" "$yt_json" | jq '..|.videoRenderer?' | sed '/^null$/d' |\
		jq  '.title.runs[0].text,.longBylineText.runs[0].text,.shortViewCountText.simpleText,.lengthText.simpleText,.publishedTimeText.simpleText,.videoId' |\
		sed 's/^"//;s/"$//;s/\\"//g' | sed -E -n ";N;N;N;N;N;s/\n/\t\|/g;p"
		)"
	[ -z "$videos_data" ] &&  { printf "No results found. Try different keywords.\n"; errinfo ; exit 1;}

} #MAIN END

## USER SELECTION
user_selection () {
	if [ $auto_select -eq 0 ] ; then
		selected_data="$(echo "$videos_data" | video_menu )"
	else
		selected_data="$(echo "$videos_data" | sed 1q )" ;
	fi

	shorturl="$(echo "$selected_data" | sed -E 's_.*\|([^|]+) *$_\1_')"
	[ -z "$shorturl" ] && exit;
	url="https://www.youtube.com/watch?v=$shorturl"
	# to get back untruncated data
	selected_data="$(echo "$videos_data" | grep -m1 -e "$shorturl" )"
	# selecte format if flag given
	[ $show_format -eq 1 ] && {
		YTFZF_PREF="$(youtube-dl -F "$url" | sed '1,3d' | tac - |\
		eval "$prompt_menu" | sed -E 's/^([^ ]*) .*/\1/')"
		[ -z $YTFZF_PREF  ] && exit;
	}
}
play_url () {

	[ $YTFZF_CUR -eq 1 ] && printf "$selected_data" > "$current_file" ;

	[ -n "$YTFZF_PREF" ] && {
		eval "$player_format""$YTFZF_PREF"  "$url"
	} || {
		[ 4 -eq $? ] || eval "$player" "$url" # Ctr-C in MPV results in a return code of 4
	} || {
		printf "ERROR[#03]: Couldn't play the video/audio using the current player.\n\tTry updating youtube-dl\n"; errinfo ; save_before_exit ; exit 2;
	}
}

while :; do
	user_selection
	play_url
	save_before_exit
	case $YTFZF_LOOP in 0) exit ;;esac
done
